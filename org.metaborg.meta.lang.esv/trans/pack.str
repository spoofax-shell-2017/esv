module pack

imports
  
  signatures/EditorService-sig
  stratego/metaborg

strategies

  pack-main-descriptor-file: 
    (_, _, esv, path, project-path) -> None()
    where
      <is-main-descriptor-file> path
    with
      packed-esv := <create-packed-descriptor(<read-definitions> esv)> esv;
      filename := $[[project-path]/target/metaborg/editor.esv.af];
      <WriteToTextFile> (filename, packed-esv)

  pack-main-descriptor-file:
    (_, _, _, path, _) -> None()
    where
      <not(is-main-descriptor-file)> path

  is-main-descriptor-file = string-ends-with(|"main.esv") <+ string-ends-with(|"Main.esv") 

  create-packed-descriptor(definitions) = Module(!"editor", id, definitions)
    
strategies

  read-definitions:
    Module(name, Imports(import*), definition*) -> [definition*, import-definition*]
    with
      name' := <strip-annos> name;
      rules(IsImported: name');
      new-import* := <filter(?Import(<strip-annos>); not(IsImported))> import*;
      import-definition* := <map(read-descriptor-file; read-definitions); concat> new-import*

  read-definitions:
    Module(name, NoImports(), definition*) -> definition*
    where
      name' := <strip-annos> name;
      rules(IsImported: name')

  read-descriptor-file:
    name -> esv
    with
      esv := <find-descriptor-file; parse-file>

  find-descriptor-file:
    name -> file
    with
      file := <resolve-in-path(|<editorservice-source-and-include-locations>)> $[[name].esv]
    <+
      <debug(!"Error: Cannot find ESV module "); fail> name
